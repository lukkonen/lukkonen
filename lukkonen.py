import json
import time

import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import pandas as pd
import warnings

warnings.filterwarnings("ignore")


def start():
    point = 0

    print('–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–≥–∞–¥–∞—Ç—å —Ü–µ–Ω—É –∞–∫—Ü–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. \n'
          '–ß—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ, –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞—É–Ω–¥–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ.')

    print('–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n'
          '–í—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–±–µ—Ä–±–∞–Ω–∫, –ì–∞–∑–ø—Ä–æ–º, –Ø–Ω–¥–µ–∫—Å).\n'

          '–í–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—ë —Ü–µ–Ω—ã.\n'

          '–í—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç–µ, –≤—ã—Ä–∞—Å—Ç–µ—Ç —Ü–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∏–ª–∏ —É–ø–∞–¥—ë—Ç.\n'

          '–ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ –≤—ã —É–∑–Ω–∞—ë—Ç–µ, —É–≥–∞–¥–∞–ª–∏ –ª–∏ –≤—ã!\n'

          '–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! üöÄ')

    answer = input()
    if answer.lower() == '–¥–∞':
        basis(point)


def basis(point):
    with open('tickers.json', encoding='utf-8') as f:
        tiker = json.load(f)

    print('–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∞–∫—Ü–∏—é –æ–¥–Ω–æ–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π:\n'
          '–°–±–µ—Ä–±–∞–Ω–∫, –ì–∞–∑–ø—Ä–æ–º, –õ—É–∫–æ–π–ª, –†–æ—Å–Ω–µ—Ñ—Ç—å, –ù–æ–≤–∞—Ç—ç–∫, –ú–∞–≥–Ω–∏—Ç, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞, –ú–¢–°, –ê–ª—Ä–æ—Å–∞ –∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º\n')

    name = input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:')

    if name not in tiker:
        print("–¢–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
        return basis(point)

    ticker = tiker[name]

    print('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞')
    year_1 = input('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å 2011 –ø–æ 2021: ')
    month_1 = input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: ')
    day_1 = input('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å: ')
    date_1 = f"{year_1}-{month_1.zfill(2)}-{day_1.zfill(2)}"

    print('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è')
    year_2 = input('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å 2011 –ø–æ 2021: ')
    month_2 = input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: ')
    day_2 = input('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å: ')
    date_2 = f"{year_2}-{month_2.zfill(2)}-{day_2.zfill(2)}"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    data = yf.download(ticker, start=date_1, end=date_2)
    time.sleep(5)
    if data.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞!")
        return basis(point)

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç
    closing_price, actual_prev_date = get_nearest_price(ticker, date_2, 'before')
    unknown_price, actual_next_date = get_nearest_price(ticker, date_2, 'after')

    if closing_price is None or unknown_price is None or actual_prev_date is None or actual_next_date is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç!")
        return basis(point)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    data['Close'].plot(label=f'{name} - —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è')
    plt.title('–¶–µ–Ω–∞ –∞–∫—Ü–∏–π')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¶–µ–Ω–∞')
    plt.legend()
    plt.show()

    print(f'–¶–µ–Ω–∞ –Ω–∞ {actual_prev_date}: {closing_price:.2f}')
    forecast = input('–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç —Ä–æ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ 1, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ 0: ')

    if forecast == '1' and unknown_price > closing_price:
        print(f'–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏! –¶–µ–Ω–∞ –Ω–∞ {actual_next_date} —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {unknown_price:.2f}')
        point += 10
        print('–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤!\n')
    elif forecast == '1' and unknown_price < closing_price:
        print(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ. –¶–µ–Ω–∞ –Ω–∞ {actual_next_date} —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {unknown_price:.2f}')
    elif forecast == '0' and unknown_price < closing_price:
        print(f'–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏! –¶–µ–Ω–∞ –Ω–∞ {actual_next_date} —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {unknown_price:.2f}')
        point += 10
        print('–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤!')
    else:
        print(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ. –¶–µ–Ω–∞ –Ω–∞ {actual_next_date} —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {unknown_price:.2f}')

    print('–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:', point)
    question = input('–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? ')
    if question.lower() == '–¥–∞':
        basis(point)
    else:
        print('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!')


def get_nearest_price(ticker, target_date, direction='before'):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º –≤ 10 –¥–Ω–µ–π
        if direction == 'before':
            start_date = (datetime.strptime(target_date, '%Y-%m-%d') - timedelta(days=10)).strftime('%Y-%m-%d')
            end_date = target_date
        else:
            start_date = target_date
            end_date = (datetime.strptime(target_date, '%Y-%m-%d') + timedelta(days=10)).strftime('%Y-%m-%d')

        data = yf.download(ticker, start=start_date, end=end_date)

        if data.empty:
            return None, None

        if direction == 'before':
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –¥–æ target_date
            available_dates = data.index[data.index <= pd.to_datetime(target_date)]
            if len(available_dates) == 0:
                return None, None
            nearest_date = available_dates.max()
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ target_date
            available_dates = data.index[data.index >= pd.to_datetime(target_date)]
            if len(available_dates) == 0:
                return None, None
            nearest_date = available_dates.min()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price = float(data.loc[nearest_date, 'Close'])
        return price, nearest_date.strftime('%Y-%m-%d')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None


start()
